{"version":3,"sources":["components/useButtonRgb.tsx","context/colorsContext.tsx","components/RgbButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colorsR","id","code","colorsG","colorsB","colorsS","ColorBg","colorsAll","useButtonRgb","color","filter","item","ColorContext","createContext","bg","setBg","console","warn","RgbButton","data","useContext","useState","clr","setClr","useEffect","interval","log","length","setInterval","randomColor","Math","floor","random","clearInterval","className","onClick","e","text","currentTarget","textContent","style","background","caption","App","renderButtons","items","colorsLetter","props","i","push","Provider","value","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64811571.chunk.js","sourcesContent":["const colorsR = [\r\n\t{id: 1, code: '#FA0F0F'},\r\n\t{id: 2, code: '#FA420B'},\r\n\t{id: 3, code: '#FA5E0B'},\r\n\t{id: 4, code: '#FA740B'},\r\n\t{id: 5, code: '#FA980B'}\r\n];\r\nconst colorsG = [\r\n\t{id: 1, code: '#7B950F'},\r\n\t{id: 2, code: '#64950F'},\r\n\t{id: 3, code: '#4A950F'},\r\n\t{id: 4, code: '#0F9550'},\r\n\t{id: 5, code: '#0F9579'}\r\n];\r\nconst colorsB = [\r\n\t{id: 1, code: '#0F7D95'},\r\n\t{id: 2, code: '#0F5A95'},\r\n\t{id: 3, code: '#0F2D95'},\r\n\t{id: 4, code: '#190F95'},\r\n\t{id: 5, code: '#4A0F95'}\r\n];\r\nconst colorsS = [\r\n\t{id: 1, code: '#fff'},\r\n\t{id: 2, code: '#000'},\r\n\t{id: 3, code: '#C9C9BF'},\r\n\t{id: 4, code: '#FA0F0F'}\r\n];\r\n\r\nfunction useButtonRgb(color: string, id: number) {\r\n\tif (color === 'R') {\r\n\t\treturn colorsR.filter(item => item.id === id)[0].code;\r\n\t} else if(color === 'G') {\r\n\t\treturn colorsG.filter(item => item.id === id)[0].code;\r\n\t} else if(color === 'B') {\r\n\t\treturn colorsB.filter(item => item.id === id)[0].code;\r\n\t} if(color === 'S') {\r\n\t\treturn colorsS.filter(item => item.id === id)[0].code;\r\n\t}\r\n\r\n}\r\n\r\nexport const colorsAll = [...colorsR, ...colorsG, ...colorsB];\r\nexport default useButtonRgb;","import { createContext, useContext } from 'react';\r\n\r\nexport enum ColorBg {\r\n\tbg = '#fff'\r\n}\r\n\r\nexport type ColorBgContextType = {\r\n\tbg: string;\r\n\tsetBg: (ColorBg: string) => void;\r\n}\r\n\r\nexport const ColorContext = createContext<ColorBgContextType>({ bg: ColorBg.bg, setBg: bg => console.warn('Default Bg')});\r\nexport const useBg = () => useContext(ColorContext);\r\n\r\nexport default ColorContext;","import React, { MouseEvent, useState, useEffect } from 'react';\r\nimport useButtonRgb, {colorsAll} from './useButtonRgb';\r\nimport {useBg} from '../context/colorsContext';\r\n\r\ntype dataColor = {\r\n\tcolor: string,\r\n\tid: number,\r\n\tcaption?: string\r\n}\r\n\r\nfunction RgbButton(data: dataColor) {\r\n\tconst {setBg} = useBg();\r\n\tconst [clr, setClr] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tlet interval;\r\n\t\tconsole.log('ACA', clr)\r\n\t\tif (clr.length > 0) {\r\n\t\t\tinterval = setInterval(() => {\r\n\t\t\t\tconst randomColor = colorsAll[Math.floor(Math.random() * colorsAll.length)];\r\n\t\t\t\tsetBg(randomColor.code);\r\n\t\t\t}, 1000);\r\n\t\t} else {\r\n\t\t\tconsole.log('CLEAR');\r\n\t\t\tclearInterval(interval);\r\n\t\t}\r\n\t}, [clr, setBg])\r\n\r\n\tconst changeColor = (e: MouseEvent<HTMLButtonElement>) => {\r\n\t\tconst text = e.currentTarget.textContent;\r\n\t\tconst randomColor = colorsAll[Math.floor(Math.random() * colorsAll.length)];\r\n\t\tif (text === 'flash') {\r\n\t\t\tsetClr(randomColor.code);\r\n\t\t} else {\r\n\t\t\tsetBg(e.currentTarget.style.background);\r\n\t\t\tsetClr('');\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<button className=\"button-standard\" onClick={changeColor} style={{background: useButtonRgb(data.color, data.id)}}>\r\n\t\t\t<span></span>\r\n\t\t\t{ data.caption ? <span>{data.caption}</span>: '' }\r\n\t\t</button>\r\n  );\r\n}\r\n\r\nexport default RgbButton;\r\n","import React, {useState} from 'react';\nimport RgbButton from './components/RgbButton';\nimport {ColorContext} from './context/colorsContext';\n\nfunction App(): JSX.Element {\n\n  const [bg, setBg] = useState('');\n  const renderButtons = (color:string) => {\n    let items = [];\n    const colorsLetter = ['R', 'G', 'B'];\n    const props = {\n      color: '',\n      id: 0,\n      caption: ''\n    }\n\n    for (let i=1; i<=5; i++){\n      props.id = i;\n      props.color = color;\n\n      if (i===1) {\n        colorsLetter.filter((item:string) => {\n          return (item === color ? props.caption = color: '')\n        });\n      } else {\n        props.caption = '';\n      }\n      \n      items.push(<RgbButton color={props.color} id={props.id} caption={props.caption} key={color+i} />)\n    }\n    return items;\n  }\n\n  return (\n    <ColorContext.Provider value={{bg, setBg}}>\n      <div className=\"container\" style={{background: bg }}>\n        <div className=\"control\">\n          <div className=\"main-block\">\n            <RgbButton color='S' id={Number(1)} caption=''/>\n            <RgbButton color='S' id={Number(1)} caption=''/>\n            <RgbButton color='S' id={Number(2)} caption='OFF'/>\n            <RgbButton color='S' id={Number(4)} caption='ON'/>\n          </div>\n          <div className=\"content-block\">\n            <div className=\"r-block block\">\n              { renderButtons('R') }\n            </div>\n            <div className=\"g-block block\">\n              { renderButtons('G') }\n            </div>\n            <div className=\"b-block block\">\n              { renderButtons('B') }\n            </div>\n            <div className=\"s-block block\">\n              <RgbButton color='S' id={Number(1)} caption='W'/>\n              <RgbButton color='S' id={Number(3)} caption='flash'/>\n              <RgbButton color='S' id={Number(3)} caption='strobe'/>\n              <RgbButton color='S' id={Number(3)} caption='fade'/>\n              <RgbButton color='S' id={Number(3)} caption='smooth'/>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ColorContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}